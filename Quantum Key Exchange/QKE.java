/*
COMPX304_Assignment_3
ID Number:1614276
Nameï¼šJason Yang
*/
import java.util.ArrayList; // Import the ArrayList class from the java.util package
import java.util.List; // Import the List interface from the java.util package

public class QKE {
    // List to store the qubits that are transmitted
    private List<Qubit> transmittedQubits;
    // List to store the polarizations used by the receiver
    private List<Integer> receiverPolarizations;
    // The secret key generated by the sender
    private String senderSecretKey;
    // The secret key generated by the receiver
    private String recivedSecretKey;

    // Constructor to initialize the QKE object with a specified number of qubits
    public QKE(int numQubits) {
        // Initialize the list to store transmitted qubits
        transmittedQubits = new ArrayList<>();
        // Initialize the list to store receiver's polarizations
        receiverPolarizations = new ArrayList<>();
        // Initialize the sender's secret key as an empty string
        senderSecretKey = "";

        // Loop to initialize transmitted qubits with random values and polarizations
        for (int i = 0; i < numQubits; i++) {
            // Add a new random qubit to the transmitted qubits list
            transmittedQubits.add(new Qubit());
        }
    }

    /**
     * Receives a list of qubits and measures them with random polarizations,
     * returning the polarizations used for the measurements.
     *
     * @return List<Integer> the polarizations used for measurements.
     */
    public List<Integer> receiveQubits() {
        // List to store the polarizations used for measurements
        List<Integer> measurements = new ArrayList<>();
        // StringBuilder to construct the receiver's secret key
        StringBuilder keyBuilder = new StringBuilder();

        // Loop through each transmitted qubit
        for (Qubit qubit : transmittedQubits) {
            // Generate a random polarization: 0 for circular, 1 for linear
            int polarization = (int) (Math.random() * 2);
            // Measure the qubit using the random polarization
            qubit.measure(polarization);
            // Add the polarization to the measurements list
            measurements.add(polarization);

            // If the qubit's polarization matches the measurement polarization
            if (qubit.getPolarization() == polarization) {
                // Append the qubit's value to the keyBuilder
                keyBuilder.append(qubit.getValue());
            }
        }

        // Store the measurements in receiverPolarizations
        this.receiverPolarizations = measurements;
        // Convert keyBuilder to string and store in recivedSecretKey
        recivedSecretKey = keyBuilder.toString();
        // Return the list of measurements
        return measurements;
    }

    /**
     * Generates a secret key based on the polarizations used by the receiver.
     *
     * @param receiverPolarizations The list of polarizations used by the receiver to measure the qubits.
     */
    public void generateSecretKey(List<Integer> receiverPolarizations) {
        // StringBuilder to construct the sender's secret key
        StringBuilder keyBuilder = new StringBuilder();

        // Loop through each transmitted qubit
        for (int i = 0; i < transmittedQubits.size(); i++) {
            // Get the transmitted qubit at index i
            Qubit transmitted = transmittedQubits.get(i);
            // Get the transmitted qubit's polarization
            int transmittedPolarization = transmitted.getPolarization();
            // Get the receiver's polarization at index i
            int receivedPolarization = receiverPolarizations.get(i);

            // If the transmitted and received polarizations match
            if (transmittedPolarization == receivedPolarization) {
                // Append the qubit's value to the keyBuilder
                keyBuilder.append(transmitted.getValue());
            }
        }

        // Convert keyBuilder to string and store in senderSecretKey
        senderSecretKey = keyBuilder.toString();
    }

    /**
     * Returns the secret key generated by the sender.
     * @return String the secret key generated by the sender.
     */
    public String getSenderSecretKey() {
        // Return the sender's secret key
        return senderSecretKey;
    }

    /**
     * Returns the secret key generated by the receiver.
     * @return String the secret key generated by the receiver.
     */
    public String getRecivedSecretKey() {
        // Return the receiver's secret key
        return recivedSecretKey;
    }
}
